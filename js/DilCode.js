var DilCode;
(function () {
    function to_ascii(str) {
        var flag = true;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c > 127) {
                flag = false;
                break;
            }
        }
        if (flag) {
            return "%@" + str + "@#";
        }
        var result = "%";
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 256) {
                result += "+";
                result += ("00" + c.toString(16)).slice(-2);
            }
            else if (c < 65536) {
                result += "&";
                result += ("0000" + c.toString(16)).slice(-4);
            }
            else if (c < 16777216) {
                result += "$";
                result += ("000000" + c.toString(16)).slice(-6);
            }
            else {
                result += "^";
                result += ("00000000" + c.toString(16)).slice(-8);
            }
        }
        result += "#";
        return result;
    }

    function from_ascii(str) {
        var result = "";
        var i = 0;
        if ((str.slice(0,1) != "%" || str.slice(-1) != "#") && (str.slice(0,2) != "%@" || str.slice(-2) != "@#")) {
            throw "Invalid DilCode format";
        }
        if (str.slice(0,2) == "%@" && str.slice(-2) == "@#"){
            return str.slice(2, -2);
        }
        i++;
        while (i < str.length) {
            if (str[i] == "+") {
                i++;
                result += String.fromCharCode(parseInt(str.slice(i, i + 2), 16));
                i += 2;
            }
            else if (str[i] == "&") {
                i++;
                result += String.fromCharCode(parseInt(str.slice(i, i + 4), 16));
                i += 4;
            }
            else if (str[i] == "$") {
                i++;
                result += String.fromCharCode(parseInt(str.slice(i, i + 6), 16));
                i += 6;
            }
            else if (str[i] == "^") {
                i++;
                result += String.fromCharCode(parseInt(str.slice(i, i + 8), 16));
                i += 8;
            }
            else if (str[i] == "#") {
                break;
            }
            else {
                throw "Invalid DilCode format";
            }
        }
        return result;
    }

    var map = ['㐀', '㐁', '㐂', '㐃', '㐄', '㐅', '㐆', '㐇', '㐈', '㐉', '㐊', '㐋', '㐌', '㐍', '㐎', '㐏', '㐐', '㐑', '㐒', '㐓', '㐔', '㐕', '㐖', '㐗', '㐘', '㐙', '㐚', '㐛', '㐜', '㐝', '㐞', '㐟', '㐠', '㐡', '㐢', '㐣', '㐤', '㐥', '㐦', '㐧', '㐨', '㐩', '㐪', '㐫', '㐬', '㐭', '㐮', '㐯', '㐰', '㐱', '㐲', '㐳', '㐴', '㐵', '㐶', '㐷', '㐸', '㐹', '㐺', '㐻', '㐼', '㐽', '㐾', '㐿', '㑀', '㑁', '㑂', '㑃', '㑄', '㑅', '㑆', '㑇', '㑈', '㑉', '㑊', '㑋', '㑌', '㑍', '㑎', '㑏', '㑐', '㑑', '㑒', '㑓', '㑔', '㑕', '㑖', '㑗', '㑘', '㑙', '㑚', '㑛', '㑜', '㑝', '㑞', '㑟', '㑠', '㑡', '㑢', '㑣', '㑤', '㑥', '㑦', '㑧', '㑨', '㑩', '㑪', '㑫', '㑬', '㑭', '㑮', '㑯', '㑰', '㑱', '㑲', '㑳', '㑴', '㑵', '㑶', '㑷', '㑸', '㑹', '㑺', '㑻', '㑼', '㑽', '㑾', '㑿', '㒀', '㒁', '㒂', '㒃', '㒄', '㒅', '㒆', '㒇', '㒈', '㒉', '㒊', '㒋', '㒌', '㒍', '㒎', '㒏', '㒐', '㒑', '㒒', '㒓', '㒔', '㒕', '㒖', '㒗', '㒘', '㒙', '㒚', '㒛', '㒜', '㒝', '㒞', '㒟', '㒠', '㒡', '㒢', '㒣', '㒤', '㒥', '㒦', '㒧', '㒨', '㒩', '㒪', '㒫', '㒬', '㒭', '㒮', '㒯', '㒰', '㒱', '㒲', '㒳', '㒴', '㒵', '㒶', '㒷', '㒸', '㒹', '㒺', '㒻', '㒼', '㒽', '㒾', '㒿', '㓀', '㓁', '㓂', '㓃', '㓄', '㓅', '㓆', '㓇', '㓈', '㓉', '㓊', '㓋', '㓌', '㓍', '㓎', '㓏', '㓐', '㓑', '㓒', '㓓', '㓔', '㓕', '㓖', '㓗', '㓘', '㓙', '㓚', '㓛', '㓜', '㓝', '㓞', '㓟', '㓠', '㓡', '㓢', '㓣', '㓤', '㓥', '㓦', '㓧', '㓨', '㓩', '㓪', '㓫', '㓬', '㓭', '㓮', '㓯', '㓰', '㓱', '㓲', '㓳', '㓴', '㓵', '㓶', '㓷', '㓸', '㓹', '㓺', '㓻', '㓼', '㓽', '㓾', '㓿', '㔀', '㔁', '㔂', '㔃', '㔄', '㔅', '㔆', '㔇', '㔈', '㔉', '㔊', '㔋', '㔌', '㔍', '㔎', '㔏', '㔐', '㔑', '㔒', '㔓', '㔔', '㔕', '㔖', '㔗', '㔘', '㔙', '㔚', '㔛', '㔜', '㔝', '㔞', '㔟', '㔠', '㔡', '㔢', '㔣', '㔤', '㔥', '㔦', '㔧', '㔨', '㔩', '㔪', '㔫', '㔬', '㔭', '㔮', '㔯', '㔰', '㔱', '㔲', '㔳', '㔴', '㔵', '㔶', '㔷', '㔸', '㔹', '㔺', '㔻', '㔼', '㔽', '㔾', '㔿', '㕀', '㕁', '㕂', '㕃', '㕄', '㕅', '㕆', '㕇', '㕈', '㕉', '㕊', '㕋', '㕌', '㕍', '㕎', '㕏', '㕐', '㕑', '㕒', '㕓', '㕔', '㕕', '㕖', '㕗', '㕘', '㕙', '㕚', '㕛', '㕜', '㕝', '㕞', '㕟', '㕠', '㕡', '㕢', '㕣', '㕤', '㕥', '㕦', '㕧', '㕨', '㕩', '㕪', '㕫', '㕬', '㕭', '㕮', '㕯', '㕰', '㕱', '㕲', '㕳', '㕴', '㕵', '㕶', '㕷', '㕸', '㕹', '㕺', '㕻', '㕼', '㕽', '㕾', '㕿', '㖀', '㖁', '㖂', '㖃', '㖄', '㖅', '㖆', '㖇', '㖈', '㖉', '㖊', '㖋', '㖌', '㖍', '㖎', '㖏', '㖐', '㖑', '㖒', '㖓', '㖔', '㖕', '㖖', '㖗', '㖘', '㖙', '㖚', '㖛', '㖜', '㖝', '㖞', '㖟', '㖠', '㖡', '㖢', '㖣', '㖤', '㖥', '㖦', '㖧', '㖨', '㖩', '㖪', '㖫', '㖬', '㖭', '㖮', '㖯', '㖰', '㖱', '㖲', '㖳', '㖴', '㖵', '㖶', '㖷', '㖸', '㖹', '㖺', '㖻', '㖼', '㖽', '㖾', '㖿', '㗀', '㗁', '㗂', '㗃', '㗄', '㗅', '㗆', '㗇', '㗈', '㗉', '㗊', '㗋', '㗌', '㗍', '㗎', '㗏', '㗐', '㗑', '㗒', '㗓', '㗔', '㗕', '㗖', '㗗', '㗘', '㗙', '㗚', '㗛', '㗜', '㗝', '㗞', '㗟', '㗠', '㗡', '㗢', '㗣', '㗤', '㗥', '㗦', '㗧', '㗨', '㗩', '㗪', '㗫', '㗬', '㗭', '㗮', '㗯', '㗰', '㗱', '㗲', '㗳', '㗴', '㗵', '㗶', '㗷', '㗸', '㗹', '㗺', '㗻', '㗼', '㗽', '㗾', '㗿', '㘀', '㘁', '㘂', '㘃', '㘄', '㘅', '㘆', '㘇', '㘈', '㘉', '㘊', '㘋', '㘌', '㘍', '㘎', '㘏', '㘐', '㘑', '㘒', '㘓', '㘔', '㘕', '㘖', '㘗', '㘘', '㘙', '㘚', '㘛', '㘜', '㘝', '㘞', '㘟', '㘠', '㘡', '㘢', '㘣', '㘤', '㘥', '㘦', '㘧', '㘨', '㘩', '㘪', '㘫', '㘬', '㘭', '㘮', '㘯', '㘰', '㘱', '㘲', '㘳', '㘴', '㘵', '㘶', '㘷', '㘸', '㘹', '㘺', '㘻', '㘼', '㘽', '㘾', '㘿', '㙀', '㙁', '㙂', '㙃', '㙄', '㙅', '㙆', '㙇', '㙈', '㙉', '㙊', '㙋', '㙌', '㙍', '㙎', '㙏', '㙐', '㙑', '㙒', '㙓', '㙔', '㙕', '㙖', '㙗', '㙘', '㙙', '㙚', '㙛', '㙜', '㙝', '㙞', '㙟', '㙠', '㙡', '㙢', '㙣', '㙤', '㙥', '㙦', '㙧', '㙨', '㙩', '㙪', '㙫', '㙬', '㙭', '㙮', '㙯', '㙰', '㙱', '㙲', '㙳', '㙴', '㙵', '㙶', '㙷', '㙸', '㙹', '㙺', '㙻', '㙼', '㙽', '㙾', '㙿', '㚀', '㚁', '㚂', '㚃', '㚄', '㚅', '㚆', '㚇', '㚈', '㚉', '㚊', '㚋', '㚌', '㚍', '㚎', '㚏', '㚐', '㚑', '㚒', '㚓', '㚔', '㚕', '㚖', '㚗', '㚘', '㚙', '㚚', '㚛', '㚜', '㚝', '㚞', '㚟', '㚠', '㚡', '㚢', '㚣', '㚤', '㚥', '㚦', '㚧', '㚨', '㚩', '㚪', '㚫', '㚬', '㚭', '㚮', '㚯', '㚰', '㚱', '㚲', '㚳', '㚴', '㚵', '㚶', '㚷', '㚸', '㚹', '㚺', '㚻', '㚼', '㚽', '㚾', '㚿', '㛀', '㛁', '㛂', '㛃', '㛄', '㛅', '㛆', '㛇', '㛈', '㛉', '㛊', '㛋', '㛌', '㛍', '㛎', '㛏', '㛐', '㛑', '㛒', '㛓', '㛔', '㛕', '㛖', '㛗', '㛘', '㛙', '㛚', '㛛', '㛜', '㛝', '㛞', '㛟', '㛠', '㛡', '㛢', '㛣', '㛤', '㛥', '㛦', '㛧', '㛨', '㛩', '㛪', '㛫', '㛬', '㛭', '㛮', '㛯', '㛰', '㛱', '㛲', '㛳', '㛴', '㛵', '㛶', '㛷', '㛸', '㛹', '㛺', '㛻', '㛼', '㛽', '㛾', '㛿', '㜀', '㜁', '㜂', '㜃', '㜄', '㜅', '㜆', '㜇', '㜈', '㜉', '㜊', '㜋', '㜌', '㜍', '㜎', '㜏', '㜐', '㜑', '㜒', '㜓', '㜔', '㜕', '㜖', '㜗', '㜘', '㜙', '㜚', '㜛', '㜜', '㜝', '㜞', '㜟', '㜠', '㜡', '㜢', '㜣', '㜤', '㜥', '㜦', '㜧', '㜨', '㜩', '㜪', '㜫', '㜬', '㜭', '㜮', '㜯', '㜰', '㜱', '㜲', '㜳', '㜴', '㜵', '㜶', '㜷', '㜸', '㜹', '㜺', '㜻', '㜼', '㜽', '㜾', '㜿', '㝀', '㝁', '㝂', '㝃', '㝄', '㝅', '㝆', '㝇', '㝈', '㝉', '㝊', '㝋', '㝌', '㝍', '㝎', '㝏', '㝐', '㝑', '㝒', '㝓', '㝔', '㝕', '㝖', '㝗', '㝘', '㝙', '㝚', '㝛', '㝜', '㝝', '㝞', '㝟', '㝠', '㝡', '㝢', '㝣', '㝤', '㝥', '㝦', '㝧', '㝨', '㝩', '㝪', '㝫', '㝬', '㝭', '㝮', '㝯', '㝰', '㝱', '㝲', '㝳', '㝴', '㝵', '㝶', '㝷', '㝸', '㝹', '㝺', '㝻', '㝼', '㝽', '㝾', '㝿', '㞀', '㞁', '㞂', '㞃', '㞄', '㞅', '㞆', '㞇', '㞈', '㞉', '㞊', '㞋', '㞌', '㞍', '㞎', '㞏', '㞐', '㞑', '㞒', '㞓', '㞔', '㞕', '㞖', '㞗', '㞘', '㞙', '㞚', '㞛', '㞜', '㞝', '㞞', '㞟', '㞠', '㞡', '㞢', '㞣', '㞤', '㞥', '㞦', '㞧', '㞨', '㞩', '㞪', '㞫', '㞬', '㞭', '㞮', '㞯', '㞰', '㞱', '㞲', '㞳', '㞴', '㞵', '㞶', '㞷', '㞸', '㞹', '㞺', '㞻', '㞼', '㞽', '㞾', '㞿', '㟀', '㟁', '㟂', '㟃', '㟄', '㟅', '㟆', '㟇', '㟈', '㟉', '㟊', '㟋', '㟌', '㟍', '㟎', '㟏', '㟐', '㟑', '㟒', '㟓', '㟔', '㟕', '㟖', '㟗', '㟘', '㟙', '㟚', '㟛', '㟜', '㟝', '㟞', '㟟', '㟠', '㟡', '㟢', '㟣', '㟤', '㟥', '㟦', '㟧', '㟨', '㟩', '㟪', '㟫', '㟬', '㟭', '㟮', '㟯', '㟰', '㟱', '㟲', '㟳', '㟴', '㟵', '㟶', '㟷', '㟸', '㟹', '㟺', '㟻', '㟼', '㟽', '㟾', '㟿'];

    var map2 = ['O', '', '|', '', '', '', 'L', 'e', ']', '\'', 'U', '\\', '', '', 'i', '', 'C', 'k', ';', 'J', 't', '', '2', '', '', '	', 'H', '(', 's', '&', '', 'R', '9', '', 'Z', 'c', 'j', '-', '', ' ', 'G', '', '>', '%', '^', 'N', 'M', 'd', '', '<', 'q', '8', '=', '', 'E', '', ',', 'a', '#', 'S', 'X', '', ')', '@', 'r', '', 'u', 'l', 'b', '4', 'o', ':', '', '!', 'y', 'T', 'I', '', '}', 'Q', '', 'v', 'B', '1', 'm', 'w', '3', 'z', '_', '~', '*', 'h', '[', 'p', '"', '6', '', '{', '$', '/', '5', 'n', '.', 'Y', 'W', '`', '', '', '', 'K', '', '7', 'x', '', 'P', '+', 'f', 'A', 'g', '?', '', '0', 'V', 'D', '', 'F', '', ''];

    function encode(str) {
        var result = '', temp2 = '';
        var temp = to_ascii(str);
        for (var i = 0; i < temp.length; i++){
            temp2 += map2[temp[i].charCodeAt()];
        }
        for (var i = 0; i < temp2.length; i++){
            result += map[(temp2[i].charCodeAt() % 128) + 128 * (Math.floor(Math.random() * 114) % 7)];
        }
        return result;
    }
    function decode(str) {
        var result = '', result2 = '';
        for (var i = 0; i < str.length; i++){
            result += String.fromCharCode(map.indexOf(str[i]) % 128);
        }
        for (var i = 0; i < result.length; i++){
            result2 += String.fromCharCode(map2.indexOf(result[i]));
        }
        return from_ascii(result2);
    }

    DilCode = {
        encode: encode,
        decode: decode
    };
})()